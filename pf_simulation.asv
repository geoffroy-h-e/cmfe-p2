% Define the main function that will use fmincon

% Constants and Parameters
T = 12; 
X0 = 100000; 
B = [0.3375; -0.072];
Phi = [0.7146 0; 0 0.0353]; 
Psi = [0.0378 0; 0 0.0947];
Lamda = 2.14*10^-5; 
I = eye(2);

f0_mean = [0; 0];
Omega = [0.0412 0; 0 1.3655]; 
f0_sampled = mvnrnd(f0_mean, Omega, 1)'; 

% Initial guess for U
u0 = zeros(T, 1);

% Equality constraints for X(t)
Aeq = zeros(T, T);
beq = zeros(T, 1);
for t = 2:T
    Aeq(t, 1:t) = ones(1, t);
end
Aeq(T,:) = ones(1, T);
beq(T) = 0;

% Inequality constraints for u(t) less or equal to 0
Aineq_ut = -eye(T);
bineq_ut = zeros(T, 1);

% Inequality constraints for ensuring x(t) is always positive
Aineq_X = tril(ones(T, T));
bineq_X = repmat(X0, T, 1) - [0; cumsum(abs(u0(1:T-1)))];

% Inequality constraints for ensuring x(t) is not superior to X0
Aineq_X0 = tril(ones(T, T));
bineq_X0 = X0 * ones(T, 1);

% Combine all the constraints
Aineq = [Aineq_ut; Aineq_X; Aineq_X0];
bineq = [bineq_ut; bineq_X; bineq_X0];

% Optimization
options = optimoptions('fmincon','Display','iter','Algorithm','sqp');
[u_opt, fval] = fmincon(@(u) pf_objective_function(u, X0, B, Phi, f0_sampled, Lamda, I, Psi), u0, Aineq, bineq, Aeq, beq, [], [], [], options);

[~, X_opt] = pf_objective_function(u_opt, X0, B, Phi, f0_sampled, Lamda, I, Psi);

% Display results
disp('Optimal control sequence:');
disp(u_opt);
disp(['Min objective value: ', num2str(fval)]);
disp('Values of x:');
disp(X_opt);
